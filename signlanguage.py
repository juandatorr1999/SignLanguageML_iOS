# -*- coding: utf-8 -*-
"""SignLanguage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JwSGB3GgQAOa0SJFwIIbe_MnXYRJ-SFx
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')

# %cd "/content/drive/My Drive/Machine Learning Project"
!pwd

import matplotlib.pyplot as plt
import numpy as np
import os
import cv2
import skimage

from keras import layers
from keras import models
from keras.applications import VGG16
from keras.preprocessing.image import ImageDataGenerator 
from keras.preprocessing import image 
from keras.utils import to_categorical
from keras import optimizers

from keras.utils.np_utils import to_categorical
from tqdm import tqdm
from skimage.transform import resize

train_dir = 'American Sign Language/asl_alphabet_train'

print(train_dir)


target_size = (200, 200)
target_dims = (200, 200, 3) 
n_classes = 27
val_frac = 0.1
batch_size = 64



datagen = ImageDataGenerator(
    rescale = 1./255,
    brightness_range=(0.8, 1),
    zoom_range=[1, 1.5],
    rotation_range = 10,
	horizontal_flip = True,
    validation_split=val_frac)
							



train_generator = datagen.flow_from_directory(train_dir, target_size=target_size, batch_size=batch_size, shuffle=True, subset="training",class_mode="categorical")
val_generator = datagen.flow_from_directory(train_dir, target_size=target_size, batch_size=batch_size, subset="validation",class_mode="categorical")

conv_base= VGG16(weights='imagenet', include_top = False, input_shape = target_dims)

model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dropout(0.5))
model.add(layers.Dense(512,activation='relu'))
model.add(layers.Dense(n_classes,activation='softmax'))


conv_base.trainable = False


model.summary()
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=["acc"])

"""Train"""

import keras
class CustomSaver(keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        self.model.save("model_{}.h5".format(epoch))

saver = CustomSaver()



history = model.fit_generator(train_generator, epochs=10, validation_data=val_generator,callbacks=[saver])

		
model.save('model_asl_complete.h5')
			
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(acc)+1)

plt.plot(epochs,acc,'bo',label='train accuracy')
plt.plot(epochs,val_acc, 'b', label='validation accuracy')
plt.title('train acc vs val acc')
plt.legend()

plt.figure()

plt.plot(epochs,loss, 'bo', label ='training loss')
plt.plot(epochs,val_loss, 'b', label = 'validation loss')
plt.title('train loss vs val loss')
plt.legend()

plt.show()